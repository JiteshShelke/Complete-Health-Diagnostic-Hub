{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1YI0C_BqFxvHFlu_bs-MSEHYgTfUEeqs-","authorship_tag":"ABX9TyPKssqa9nP4QdHxAlClZdKr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"KhfuLEtMBr5B","executionInfo":{"status":"ok","timestamp":1726023876891,"user_tz":-330,"elapsed":2001,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix"]},{"cell_type":"code","source":["df=pd.read_csv(\"/content/drive/MyDrive/FULL_BODY_HEALTH_CHECKUP/Diabetes Test/diabetes.csv\")\n","print(df.shape)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"OKQWsrf5CdI5","executionInfo":{"status":"ok","timestamp":1726023877374,"user_tz":-330,"elapsed":486,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"3b912487-245a-46ef-818e-6d98127b873f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(768, 9)\n"]},{"output_type":"execute_result","data":{"text/plain":["     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n","0              6      148             72             35        0  33.6   \n","1              1       85             66             29        0  26.6   \n","2              8      183             64              0        0  23.3   \n","3              1       89             66             23       94  28.1   \n","4              0      137             40             35      168  43.1   \n","..           ...      ...            ...            ...      ...   ...   \n","763           10      101             76             48      180  32.9   \n","764            2      122             70             27        0  36.8   \n","765            5      121             72             23      112  26.2   \n","766            1      126             60              0        0  30.1   \n","767            1       93             70             31        0  30.4   \n","\n","     DiabetesPedigreeFunction  Age  Outcome  \n","0                       0.627   50        1  \n","1                       0.351   31        0  \n","2                       0.672   32        1  \n","3                       0.167   21        0  \n","4                       2.288   33        1  \n","..                        ...  ...      ...  \n","763                     0.171   63        0  \n","764                     0.340   27        0  \n","765                     0.245   30        0  \n","766                     0.349   47        1  \n","767                     0.315   23        0  \n","\n","[768 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-f6f069f5-359a-420b-8ab0-304e20568fce\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>148</td>\n","      <td>72</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>33.6</td>\n","      <td>0.627</td>\n","      <td>50</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>85</td>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>26.6</td>\n","      <td>0.351</td>\n","      <td>31</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>8</td>\n","      <td>183</td>\n","      <td>64</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>23.3</td>\n","      <td>0.672</td>\n","      <td>32</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>89</td>\n","      <td>66</td>\n","      <td>23</td>\n","      <td>94</td>\n","      <td>28.1</td>\n","      <td>0.167</td>\n","      <td>21</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>137</td>\n","      <td>40</td>\n","      <td>35</td>\n","      <td>168</td>\n","      <td>43.1</td>\n","      <td>2.288</td>\n","      <td>33</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>10</td>\n","      <td>101</td>\n","      <td>76</td>\n","      <td>48</td>\n","      <td>180</td>\n","      <td>32.9</td>\n","      <td>0.171</td>\n","      <td>63</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>764</th>\n","      <td>2</td>\n","      <td>122</td>\n","      <td>70</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>36.8</td>\n","      <td>0.340</td>\n","      <td>27</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>5</td>\n","      <td>121</td>\n","      <td>72</td>\n","      <td>23</td>\n","      <td>112</td>\n","      <td>26.2</td>\n","      <td>0.245</td>\n","      <td>30</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>766</th>\n","      <td>1</td>\n","      <td>126</td>\n","      <td>60</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>30.1</td>\n","      <td>0.349</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>767</th>\n","      <td>1</td>\n","      <td>93</td>\n","      <td>70</td>\n","      <td>31</td>\n","      <td>0</td>\n","      <td>30.4</td>\n","      <td>0.315</td>\n","      <td>23</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>768 rows Ã— 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6f069f5-359a-420b-8ab0-304e20568fce')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f6f069f5-359a-420b-8ab0-304e20568fce button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f6f069f5-359a-420b-8ab0-304e20568fce');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-54cdc88a-ef17-4479-aef4-e87053687b82\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-54cdc88a-ef17-4479-aef4-e87053687b82')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-54cdc88a-ef17-4479-aef4-e87053687b82 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f78e4632-e6a6-4435-9dee-f6e85877c8fc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f78e4632-e6a6-4435-9dee-f6e85877c8fc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 768,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          6,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 0,\n        \"max\": 199,\n        \"num_unique_values\": 136,\n        \"samples\": [\n          151,\n          101,\n          112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 122,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          86,\n          46,\n          85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          7,\n          12,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115,\n        \"min\": 0,\n        \"max\": 846,\n        \"num_unique_values\": 186,\n        \"samples\": [\n          52,\n          41,\n          183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.884160320375446,\n        \"min\": 0.0,\n        \"max\": 67.1,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          19.9,\n          31.0,\n          38.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3313285950127749,\n        \"min\": 0.078,\n        \"max\": 2.42,\n        \"num_unique_values\": 517,\n        \"samples\": [\n          1.731,\n          0.426,\n          0.138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 21,\n        \"max\": 81,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          60,\n          47,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AOpM2P_7CdLs","executionInfo":{"status":"ok","timestamp":1726023885222,"user_tz":-330,"elapsed":797,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"53d42a30-7bd2-40f8-ead6-3755c4d38ba5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 768 entries, 0 to 767\n","Data columns (total 9 columns):\n"," #   Column                    Non-Null Count  Dtype  \n","---  ------                    --------------  -----  \n"," 0   Pregnancies               768 non-null    int64  \n"," 1   Glucose                   768 non-null    int64  \n"," 2   BloodPressure             768 non-null    int64  \n"," 3   SkinThickness             768 non-null    int64  \n"," 4   Insulin                   768 non-null    int64  \n"," 5   BMI                       768 non-null    float64\n"," 6   DiabetesPedigreeFunction  768 non-null    float64\n"," 7   Age                       768 non-null    int64  \n"," 8   Outcome                   768 non-null    int64  \n","dtypes: float64(2), int64(7)\n","memory usage: 54.1 KB\n"]}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"zHb-Q41XCrS0","executionInfo":{"status":"ok","timestamp":1726023918003,"user_tz":-330,"elapsed":711,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"a1158d60-901c-40a9-b997-76c371ff828a"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pregnancies                 0\n","Glucose                     0\n","BloodPressure               0\n","SkinThickness               0\n","Insulin                     0\n","BMI                         0\n","DiabetesPedigreeFunction    0\n","Age                         0\n","Outcome                     0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Pregnancies</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Glucose</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>BloodPressure</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SkinThickness</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Insulin</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>BMI</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>DiabetesPedigreeFunction</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Outcome</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["X=df.drop(\"Outcome\",axis=1)\n","y=df[\"Outcome\"]\n","from sklearn.model_selection import train_test_split\n","X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.7,random_state=78)\n","X_train.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"tnyOGzavCrVL","executionInfo":{"status":"ok","timestamp":1726023929803,"user_tz":-330,"elapsed":14,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"c86b3a0f-69cc-40d1-d444-782cfe4b6c3d"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          Pregnancies   Glucose  BloodPressure  SkinThickness  \\\n","Pregnancies                  1.000000  0.088380       0.229417      -0.109471   \n","Glucose                      0.088380  1.000000       0.148279       0.047826   \n","BloodPressure                0.229417  0.148279       1.000000       0.253052   \n","SkinThickness               -0.109471  0.047826       0.253052       1.000000   \n","Insulin                     -0.093053  0.368927       0.096244       0.439339   \n","BMI                          0.039885  0.261616       0.322630       0.352175   \n","DiabetesPedigreeFunction    -0.071848  0.113165       0.124128       0.201788   \n","Age                          0.517185  0.240745       0.222557      -0.176716   \n","\n","                           Insulin       BMI  DiabetesPedigreeFunction  \\\n","Pregnancies              -0.093053  0.039885                 -0.071848   \n","Glucose                   0.368927  0.261616                  0.113165   \n","BloodPressure             0.096244  0.322630                  0.124128   \n","SkinThickness             0.439339  0.352175                  0.201788   \n","Insulin                   1.000000  0.175054                  0.156471   \n","BMI                       0.175054  1.000000                  0.131115   \n","DiabetesPedigreeFunction  0.156471  0.131115                  1.000000   \n","Age                      -0.046136  0.065780                  0.102497   \n","\n","                               Age  \n","Pregnancies               0.517185  \n","Glucose                   0.240745  \n","BloodPressure             0.222557  \n","SkinThickness            -0.176716  \n","Insulin                  -0.046136  \n","BMI                       0.065780  \n","DiabetesPedigreeFunction  0.102497  \n","Age                       1.000000  "],"text/html":["\n","  <div id=\"df-e14f0c3b-714a-4e2c-9cea-c09811b0c28b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pregnancies</th>\n","      <th>Glucose</th>\n","      <th>BloodPressure</th>\n","      <th>SkinThickness</th>\n","      <th>Insulin</th>\n","      <th>BMI</th>\n","      <th>DiabetesPedigreeFunction</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Pregnancies</th>\n","      <td>1.000000</td>\n","      <td>0.088380</td>\n","      <td>0.229417</td>\n","      <td>-0.109471</td>\n","      <td>-0.093053</td>\n","      <td>0.039885</td>\n","      <td>-0.071848</td>\n","      <td>0.517185</td>\n","    </tr>\n","    <tr>\n","      <th>Glucose</th>\n","      <td>0.088380</td>\n","      <td>1.000000</td>\n","      <td>0.148279</td>\n","      <td>0.047826</td>\n","      <td>0.368927</td>\n","      <td>0.261616</td>\n","      <td>0.113165</td>\n","      <td>0.240745</td>\n","    </tr>\n","    <tr>\n","      <th>BloodPressure</th>\n","      <td>0.229417</td>\n","      <td>0.148279</td>\n","      <td>1.000000</td>\n","      <td>0.253052</td>\n","      <td>0.096244</td>\n","      <td>0.322630</td>\n","      <td>0.124128</td>\n","      <td>0.222557</td>\n","    </tr>\n","    <tr>\n","      <th>SkinThickness</th>\n","      <td>-0.109471</td>\n","      <td>0.047826</td>\n","      <td>0.253052</td>\n","      <td>1.000000</td>\n","      <td>0.439339</td>\n","      <td>0.352175</td>\n","      <td>0.201788</td>\n","      <td>-0.176716</td>\n","    </tr>\n","    <tr>\n","      <th>Insulin</th>\n","      <td>-0.093053</td>\n","      <td>0.368927</td>\n","      <td>0.096244</td>\n","      <td>0.439339</td>\n","      <td>1.000000</td>\n","      <td>0.175054</td>\n","      <td>0.156471</td>\n","      <td>-0.046136</td>\n","    </tr>\n","    <tr>\n","      <th>BMI</th>\n","      <td>0.039885</td>\n","      <td>0.261616</td>\n","      <td>0.322630</td>\n","      <td>0.352175</td>\n","      <td>0.175054</td>\n","      <td>1.000000</td>\n","      <td>0.131115</td>\n","      <td>0.065780</td>\n","    </tr>\n","    <tr>\n","      <th>DiabetesPedigreeFunction</th>\n","      <td>-0.071848</td>\n","      <td>0.113165</td>\n","      <td>0.124128</td>\n","      <td>0.201788</td>\n","      <td>0.156471</td>\n","      <td>0.131115</td>\n","      <td>1.000000</td>\n","      <td>0.102497</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0.517185</td>\n","      <td>0.240745</td>\n","      <td>0.222557</td>\n","      <td>-0.176716</td>\n","      <td>-0.046136</td>\n","      <td>0.065780</td>\n","      <td>0.102497</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e14f0c3b-714a-4e2c-9cea-c09811b0c28b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e14f0c3b-714a-4e2c-9cea-c09811b0c28b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e14f0c3b-714a-4e2c-9cea-c09811b0c28b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-d307fa3a-db44-468a-ac65-246f24e0d67a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d307fa3a-db44-468a-ac65-246f24e0d67a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-d307fa3a-db44-468a-ac65-246f24e0d67a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3845445584326312,\n        \"min\": -0.10947131386814841,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.08837958075018637,\n          0.03988505182818881,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30796322246184454,\n        \"min\": 0.04782637726827913,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0,\n          0.26161571417877816,\n          0.08837958075018637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29256519347280824,\n        \"min\": 0.09624350910466482,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.14827949084156875,\n          0.3226303898725586,\n          0.22941660429808877\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3709630126863673,\n        \"min\": -0.1767158391924018,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.04782637726827913,\n          0.35217453284370487,\n          -0.10947131386814841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.349429692635209,\n        \"min\": -0.09305283570419348,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.36892703632232154,\n          0.17505376643445855,\n          -0.09305283570419348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30729825605878414,\n        \"min\": 0.03988505182818881,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.26161571417877816,\n          1.0,\n          0.03988505182818881\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.325193279087664,\n        \"min\": -0.07184829634565071,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.11316507694599116,\n          0.13111493620589884,\n          -0.07184829634565071\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37023493168064975,\n        \"min\": -0.1767158391924018,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.24074514374609357,\n          0.06577991723357605,\n          0.5171851925388654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["import seaborn as sns\n","plt.figure(figsize=(12,10))\n","cor=X_train.corr()\n","sns.heatmap(cor,annot=True,cmap=plt.cm.CMRmap_r)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":912},"id":"j-qR_PgoCrXs","executionInfo":{"status":"ok","timestamp":1726023939896,"user_tz":-330,"elapsed":2680,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"674c0668-87fa-4c7c-9f06-7899a9c2fdf0"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def correlation(dataset , threshold):\n","  col_corr = set()\n","  corr_matrix = dataset.corr()\n","  for i in range(len(corr_matrix.columns)):\n","    print(i)\n","    for j in range (i):\n","      print(\"J = \", j)\n","      print(corr_matrix.iloc[i,j])\n","      if abs (corr_matrix.iloc[i,j]) > threshold:\n","        colname=corr_matrix.columns[i]\n","        col_corr.add(colname)\n","  return col_corr\n","\n"],"metadata":{"id":"6k9tlH9jCraO","executionInfo":{"status":"ok","timestamp":1726023945439,"user_tz":-330,"elapsed":454,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["corr_features=correlation(X_train,0.7)\n","len(set(corr_features))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uw4BdQHvCrcD","executionInfo":{"status":"ok","timestamp":1726023951710,"user_tz":-330,"elapsed":681,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"a01549c7-b8d8-451b-9bd3-a0a76554af12"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","J =  0\n","0.08837958075018637\n","2\n","J =  0\n","0.22941660429808877\n","J =  1\n","0.14827949084156875\n","3\n","J =  0\n","-0.10947131386814841\n","J =  1\n","0.04782637726827913\n","J =  2\n","0.25305157697702546\n","4\n","J =  0\n","-0.09305283570419348\n","J =  1\n","0.36892703632232154\n","J =  2\n","0.09624350910466482\n","J =  3\n","0.4393392461552402\n","5\n","J =  0\n","0.03988505182818881\n","J =  1\n","0.26161571417877816\n","J =  2\n","0.3226303898725586\n","J =  3\n","0.35217453284370487\n","J =  4\n","0.17505376643445855\n","6\n","J =  0\n","-0.07184829634565071\n","J =  1\n","0.11316507694599116\n","J =  2\n","0.12412813867490848\n","J =  3\n","0.20178818660543751\n","J =  4\n","0.1564709847817081\n","J =  5\n","0.13111493620589884\n","7\n","J =  0\n","0.5171851925388654\n","J =  1\n","0.24074514374609357\n","J =  2\n","0.2225570193787499\n","J =  3\n","-0.1767158391924018\n","J =  4\n","-0.046135538104446865\n","J =  5\n","0.06577991723357605\n","J =  6\n","0.10249732578900275\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["corr_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gDsl3rR8C1-1","executionInfo":{"status":"ok","timestamp":1726023961251,"user_tz":-330,"elapsed":708,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"b30ac216-4cb0-4e7b-ffe3-df8203ee106c"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["set()"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["from sklearn.feature_selection import chi2\n","chi_scores=chi2(X_train,y_train)\n","chi_scores = chi2(X, y)"],"metadata":{"id":"4npAmy1UC4gw","executionInfo":{"status":"ok","timestamp":1726023967848,"user_tz":-330,"elapsed":456,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#VISUALIZATION OF CHI-SQUARE SCORE\n","# higher the chi value, higher the importance\n","chi_values = pd.Series(chi_scores[0], index=X.columns)\n","chi_values.sort_values(ascending=False, inplace=True)\n","chi_values.plot.bar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":614},"id":"vdOIPpyjC6QY","executionInfo":{"status":"ok","timestamp":1726023974953,"user_tz":-330,"elapsed":2177,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"146322c8-8018-4036-dba1-440b352d62c3"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZSE7ZE1vC9-N","executionInfo":{"status":"ok","timestamp":1726023989757,"user_tz":-330,"elapsed":721,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"207d1d2d-1ec2-435e-e64d-c8ea7bb934d6"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n","       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n","      dtype='object')"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import joblib\n","\n","\n","# Selecting the top features\n","X = df[['Age','BMI','Glucose', 'Insulin']]\n","y = df['Outcome']  # Assuming 'class' is the target variable\n","\n","\n","# Step 5: Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 6: Standardize the features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# **Step 3 (Saving the Scaler): Save the scaler**\n","joblib.dump(scaler, 'scale diabetes.pkl')\n","\n","# Step 7: Initialize the models\n","models = {\n","    'Logistic Regression diabetes': LogisticRegression(),\n","    'K-Nearest Neighbors diabetes': KNeighborsClassifier(),\n","    'Decision Tree diabetes': DecisionTreeClassifier(),\n","    'Random Forest diabetes': RandomForestClassifier(),\n","    'Support Vector Machine diabetes': SVC(),\n","}\n","\n","# Step 8: Train and evaluate each model\n","results = {}\n","\n","for name, model in models.items():\n","    print(f'Training {name}...')\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    results[name] = accuracy\n","\n","    print(f'{name} Accuracy: {accuracy:.2f}')\n","    print('Confusion Matrix:')\n","    print(confusion_matrix(y_test, y_pred))\n","    print('Classification Report:')\n","    print(classification_report(y_test, y_pred))\n","    print('-' * 50)\n","\n","# Step 9: Compare the models\n","print('Model Comparison:')\n","for name, accuracy in results.items():\n","    print(f'{name}: {accuracy:.2f}')\n","\n","# Step 10: Save the models\n","for name, model in models.items():\n","    joblib.dump(model, f'{name}.pkl')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ljvt2HpjC_mN","executionInfo":{"status":"ok","timestamp":1726024217089,"user_tz":-330,"elapsed":1734,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"8cd32260-27b9-4aae-b771-f0fdf548e615"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Logistic Regression diabetes...\n","Logistic Regression diabetes Accuracy: 0.75\n","Confusion Matrix:\n","[[82 17]\n"," [21 34]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.80      0.83      0.81        99\n","           1       0.67      0.62      0.64        55\n","\n","    accuracy                           0.75       154\n","   macro avg       0.73      0.72      0.73       154\n","weighted avg       0.75      0.75      0.75       154\n","\n","--------------------------------------------------\n","Training K-Nearest Neighbors diabetes...\n","K-Nearest Neighbors diabetes Accuracy: 0.70\n","Confusion Matrix:\n","[[72 27]\n"," [19 36]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.79      0.73      0.76        99\n","           1       0.57      0.65      0.61        55\n","\n","    accuracy                           0.70       154\n","   macro avg       0.68      0.69      0.68       154\n","weighted avg       0.71      0.70      0.71       154\n","\n","--------------------------------------------------\n","Training Decision Tree diabetes...\n","Decision Tree diabetes Accuracy: 0.66\n","Confusion Matrix:\n","[[69 30]\n"," [23 32]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.75      0.70      0.72        99\n","           1       0.52      0.58      0.55        55\n","\n","    accuracy                           0.66       154\n","   macro avg       0.63      0.64      0.63       154\n","weighted avg       0.67      0.66      0.66       154\n","\n","--------------------------------------------------\n","Training Random Forest diabetes...\n","Random Forest diabetes Accuracy: 0.73\n","Confusion Matrix:\n","[[73 26]\n"," [16 39]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.82      0.74      0.78        99\n","           1       0.60      0.71      0.65        55\n","\n","    accuracy                           0.73       154\n","   macro avg       0.71      0.72      0.71       154\n","weighted avg       0.74      0.73      0.73       154\n","\n","--------------------------------------------------\n","Training Support Vector Machine diabetes...\n","Support Vector Machine diabetes Accuracy: 0.75\n","Confusion Matrix:\n","[[83 16]\n"," [22 33]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.79      0.84      0.81        99\n","           1       0.67      0.60      0.63        55\n","\n","    accuracy                           0.75       154\n","   macro avg       0.73      0.72      0.72       154\n","weighted avg       0.75      0.75      0.75       154\n","\n","--------------------------------------------------\n","Model Comparison:\n","Logistic Regression diabetes: 0.75\n","K-Nearest Neighbors diabetes: 0.70\n","Decision Tree diabetes: 0.66\n","Random Forest diabetes: 0.73\n","Support Vector Machine diabetes: 0.75\n"]}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"6BFabd5fDkzm","executionInfo":{"status":"ok","timestamp":1726024152663,"user_tz":-330,"elapsed":471,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"b63a1dbe-46f4-410e-ecf9-38ebabd9f737"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Age   BMI  Glucose  Insulin\n","0     50  33.6      148        0\n","1     31  26.6       85        0\n","2     32  23.3      183        0\n","3     21  28.1       89       94\n","4     33  43.1      137      168\n","..   ...   ...      ...      ...\n","763   63  32.9      101      180\n","764   27  36.8      122        0\n","765   30  26.2      121      112\n","766   47  30.1      126        0\n","767   23  30.4       93        0\n","\n","[768 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-a3dfd6a1-2f80-462e-9db6-eec9acf20e88\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BMI</th>\n","      <th>Glucose</th>\n","      <th>Insulin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>50</td>\n","      <td>33.6</td>\n","      <td>148</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>31</td>\n","      <td>26.6</td>\n","      <td>85</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>32</td>\n","      <td>23.3</td>\n","      <td>183</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>21</td>\n","      <td>28.1</td>\n","      <td>89</td>\n","      <td>94</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>43.1</td>\n","      <td>137</td>\n","      <td>168</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>63</td>\n","      <td>32.9</td>\n","      <td>101</td>\n","      <td>180</td>\n","    </tr>\n","    <tr>\n","      <th>764</th>\n","      <td>27</td>\n","      <td>36.8</td>\n","      <td>122</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>30</td>\n","      <td>26.2</td>\n","      <td>121</td>\n","      <td>112</td>\n","    </tr>\n","    <tr>\n","      <th>766</th>\n","      <td>47</td>\n","      <td>30.1</td>\n","      <td>126</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>767</th>\n","      <td>23</td>\n","      <td>30.4</td>\n","      <td>93</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>768 rows Ã— 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3dfd6a1-2f80-462e-9db6-eec9acf20e88')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a3dfd6a1-2f80-462e-9db6-eec9acf20e88 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a3dfd6a1-2f80-462e-9db6-eec9acf20e88');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9690ac15-38b0-40a1-8565-aaf3cffd755e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9690ac15-38b0-40a1-8565-aaf3cffd755e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9690ac15-38b0-40a1-8565-aaf3cffd755e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cb3c88c7-755a-49d4-af08-000b0b81428d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cb3c88c7-755a-49d4-af08-000b0b81428d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 768,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 21,\n        \"max\": 81,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          60,\n          47,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.884160320375446,\n        \"min\": 0.0,\n        \"max\": 67.1,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          19.9,\n          31.0,\n          38.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 0,\n        \"max\": 199,\n        \"num_unique_values\": 136,\n        \"samples\": [\n          151,\n          101,\n          112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115,\n        \"min\": 0,\n        \"max\": 846,\n        \"num_unique_values\": 186,\n        \"samples\": [\n          52,\n          41,\n          183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"P6aQQsSXDntJ","executionInfo":{"status":"ok","timestamp":1726024158657,"user_tz":-330,"elapsed":754,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"fe726b66-20b2-4802-bada-3fe196006751"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      1\n","1      0\n","2      1\n","3      0\n","4      1\n","      ..\n","763    0\n","764    0\n","765    0\n","766    1\n","767    0\n","Name: Outcome, Length: 768, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Outcome</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>763</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>764</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>765</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>766</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>767</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>768 rows Ã— 1 columns</p>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["import joblib\n","import numpy as np\n","\n","# Load the scaler\n","scaler = joblib.load('/content/scale diabetes.pkl')\n","\n","# Example input data (make sure this matches the feature order and number)\n","input_data = np.array([[50\t,33.6\t,148\t,0]])\n","\n","# Transform the input data using the scaler\n","input_data_scaled = scaler.transform(input_data)\n","\n","# Load the model (replace 'Logistic Regression.pkl' with your model file)\n","model = joblib.load('/content/Logistic Regression diabetes.pkl')\n","\n","# Make the prediction\n","y_pred1 = model.predict(input_data_scaled)\n","\n","print(y_pred1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tY-JigNRDoam","executionInfo":{"status":"ok","timestamp":1726024258481,"user_tz":-330,"elapsed":744,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"34e5a25d-f3db-499b-feb0-c5154005a195"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[1]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["import joblib\n","import numpy as np\n","\n","# Load the scaler\n","scaler = joblib.load('/content/scale diabetes.pkl')\n","\n","# Example input data (make sure this matches the feature order and number)\n","input_data = np.array([[31\t,26.6\t,85\t,0]])\n","\n","# Transform the input data using the scaler\n","input_data_scaled = scaler.transform(input_data)\n","\n","# Load the model (replace 'Logistic Regression.pkl' with your model file)\n","model = joblib.load('/content/Logistic Regression diabetes.pkl')\n","\n","# Make the prediction\n","y_pred1 = model.predict(input_data_scaled)\n","\n","print(y_pred1)\n"],"metadata":{"id":"SGWddhNeECD9","executionInfo":{"status":"ok","timestamp":1726024289476,"user_tz":-330,"elapsed":700,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"94d83077-15c4-4718-fa3d-8243a1e872a6","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n","  warnings.warn(\n"]}]}]}