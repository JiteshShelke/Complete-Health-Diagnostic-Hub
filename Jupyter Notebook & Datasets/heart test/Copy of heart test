{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1WtyppDPvCSnC1dye2d2goT-f-m2sz0If","authorship_tag":"ABX9TyP86lTIOb5Ib6acfT2Z338G"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"uRzhw0KcE0ZR"},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix"]},{"cell_type":"code","source":["df=pd.read_csv(\"/content/drive/MyDrive/FULL_BODY_HEALTH_CHECKUP/heart test/heart.csv\")\n","print(df.shape)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":442},"id":"qW1m8_EdLoI_","executionInfo":{"status":"ok","timestamp":1724820654454,"user_tz":-330,"elapsed":1117,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"e58bcc4b-95fe-40df-f368-cbead81ea396"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1025, 14)\n"]},{"output_type":"execute_result","data":{"text/plain":["      age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n","0      52    1   0       125   212    0        1      168      0      1.0   \n","1      53    1   0       140   203    1        0      155      1      3.1   \n","2      70    1   0       145   174    0        1      125      1      2.6   \n","3      61    1   0       148   203    0        1      161      0      0.0   \n","4      62    0   0       138   294    1        1      106      0      1.9   \n","...   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n","1020   59    1   1       140   221    0        1      164      1      0.0   \n","1021   60    1   0       125   258    0        0      141      1      2.8   \n","1022   47    1   0       110   275    0        0      118      1      1.0   \n","1023   50    0   0       110   254    0        0      159      0      0.0   \n","1024   54    1   0       120   188    0        1      113      0      1.4   \n","\n","      slope  ca  thal  target  \n","0         2   2     3       0  \n","1         0   0     3       0  \n","2         0   0     3       0  \n","3         2   1     3       0  \n","4         1   3     2       0  \n","...     ...  ..   ...     ...  \n","1020      2   0     2       1  \n","1021      1   1     3       0  \n","1022      1   1     2       0  \n","1023      2   0     2       1  \n","1024      1   1     3       0  \n","\n","[1025 rows x 14 columns]"],"text/html":["\n","  <div id=\"df-1042453b-e255-403d-8ce8-f39efdcd1e9e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>ca</th>\n","      <th>thal</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>52</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>125</td>\n","      <td>212</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>168</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>53</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>203</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>155</td>\n","      <td>1</td>\n","      <td>3.1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>70</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>145</td>\n","      <td>174</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>125</td>\n","      <td>1</td>\n","      <td>2.6</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>61</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>148</td>\n","      <td>203</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>161</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>62</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>138</td>\n","      <td>294</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>106</td>\n","      <td>0</td>\n","      <td>1.9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1020</th>\n","      <td>59</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>140</td>\n","      <td>221</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>164</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1021</th>\n","      <td>60</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>125</td>\n","      <td>258</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>141</td>\n","      <td>1</td>\n","      <td>2.8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1022</th>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>110</td>\n","      <td>275</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>118</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1023</th>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>110</td>\n","      <td>254</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>159</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1024</th>\n","      <td>54</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>120</td>\n","      <td>188</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>113</td>\n","      <td>0</td>\n","      <td>1.4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1025 rows Ã— 14 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1042453b-e255-403d-8ce8-f39efdcd1e9e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1042453b-e255-403d-8ce8-f39efdcd1e9e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1042453b-e255-403d-8ce8-f39efdcd1e9e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-94c688e2-5a29-4fd1-848c-87a96d14a331\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-94c688e2-5a29-4fd1-848c-87a96d14a331')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-94c688e2-5a29-4fd1-848c-87a96d14a331 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9483c631-7e84-4a9a-a3e6-7cb28602aee7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9483c631-7e84-4a9a-a3e6-7cb28602aee7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 1025,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          65,\n          50,\n          54\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.175053255150176,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":523},"id":"c4qSqOvxMBtE","executionInfo":{"status":"ok","timestamp":1724820656964,"user_tz":-330,"elapsed":17,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"ec570021-87f6-4ddb-9858-ee3b42979b70"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["age         0\n","sex         0\n","cp          0\n","trestbps    0\n","chol        0\n","fbs         0\n","restecg     0\n","thalach     0\n","exang       0\n","oldpeak     0\n","slope       0\n","ca          0\n","thal        0\n","target      0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>cp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>trestbps</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>chol</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fbs</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>restecg</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>thalach</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>exang</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>oldpeak</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>slope</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>ca</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>thal</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df[\"sex\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"FFAJYfmjU3Cv","executionInfo":{"status":"ok","timestamp":1724820811990,"user_tz":-330,"elapsed":497,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"30c43114-c5e1-4d3d-f1ce-2006a1e80982"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sex\n","1    713\n","0    312\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>713</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>312</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df[\"cp\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"CkyYaUISU3FX","executionInfo":{"status":"ok","timestamp":1724820815196,"user_tz":-330,"elapsed":13,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"24ab601f-7f3e-4700-eb3a-66681a4b451d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["cp\n","0    497\n","2    284\n","1    167\n","3     77\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>cp</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>497</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>284</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>167</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>77</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df[\"restecg\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"CQfKnyvsU3Jw","executionInfo":{"status":"ok","timestamp":1724820824651,"user_tz":-330,"elapsed":481,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"2f5c168f-a36e-4994-dccd-1c1593dc2ad9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["restecg\n","1    513\n","0    497\n","2     15\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>restecg</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>513</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>497</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df[\"fbs\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"6Kdd46BHU3MJ","executionInfo":{"status":"ok","timestamp":1724820827343,"user_tz":-330,"elapsed":398,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"6f43cbea-3c82-4644-8560-8f86f745fee9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["fbs\n","0    872\n","1    153\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>fbs</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>872</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>153</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["df[\"exang\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"yBjUgYELU3RG","executionInfo":{"status":"ok","timestamp":1724820835630,"user_tz":-330,"elapsed":648,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"1418c2fe-374e-41c3-c090-2fcbf800fa8c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["exang\n","0    680\n","1    345\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>exang</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>680</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>345</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["df[\"slope\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":209},"id":"L4Qp9tOfU3Vl","executionInfo":{"status":"ok","timestamp":1724820844371,"user_tz":-330,"elapsed":1079,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"e6b64e5e-75d6-4676-b489-d9a2341862cc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["slope\n","1    482\n","2    469\n","0     74\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>slope</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>482</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>469</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>74</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df[\"ca\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"UqhZoSoZU3YI","executionInfo":{"status":"ok","timestamp":1724820846604,"user_tz":-330,"elapsed":18,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"304b4e56-33cf-4752-f2a6-82d3f4a5c511"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ca\n","0    578\n","1    226\n","2    134\n","3     69\n","4     18\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>ca</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>578</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>226</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>134</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>69</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>18</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df[\"thal\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"QWsFlS-hU3ac","executionInfo":{"status":"ok","timestamp":1724820849852,"user_tz":-330,"elapsed":17,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"4d5dbee6-c86f-46a6-fbf1-ba3658e0e59d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["thal\n","2    544\n","3    410\n","1     64\n","0      7\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>thal</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>544</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>410</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df[\"target\"].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"5ri_wo8uVHVK","executionInfo":{"status":"ok","timestamp":1724820852237,"user_tz":-330,"elapsed":20,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"45f2a6d9-a4aa-4aa4-985a-7585dceb2d82"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["target\n","1    526\n","0    499\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>target</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>526</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>499</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["X=df.drop(\"target\",axis=1)\n","y=df[\"target\"]\n","print(X)\n","\n","from sklearn.model_selection import train_test_split\n","\n","X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.7,random_state=78)\n","\n","X_train.corr()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":925},"id":"3XsnQuy4N3JP","executionInfo":{"status":"ok","timestamp":1724769736997,"user_tz":-330,"elapsed":765,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"2d49e52e-11a2-4978-8290-4e62a8104c5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  \\\n","0      52    1   0       125   212    0        1      168      0      1.0   \n","1      53    1   0       140   203    1        0      155      1      3.1   \n","2      70    1   0       145   174    0        1      125      1      2.6   \n","3      61    1   0       148   203    0        1      161      0      0.0   \n","4      62    0   0       138   294    1        1      106      0      1.9   \n","...   ...  ...  ..       ...   ...  ...      ...      ...    ...      ...   \n","1020   59    1   1       140   221    0        1      164      1      0.0   \n","1021   60    1   0       125   258    0        0      141      1      2.8   \n","1022   47    1   0       110   275    0        0      118      1      1.0   \n","1023   50    0   0       110   254    0        0      159      0      0.0   \n","1024   54    1   0       120   188    0        1      113      0      1.4   \n","\n","      slope  ca  thal  \n","0         2   2     3  \n","1         0   0     3  \n","2         0   0     3  \n","3         2   1     3  \n","4         1   3     2  \n","...     ...  ..   ...  \n","1020      2   0     2  \n","1021      1   1     3  \n","1022      1   1     2  \n","1023      2   0     2  \n","1024      1   1     3  \n","\n","[1025 rows x 13 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["               age       sex        cp  trestbps      chol       fbs  \\\n","age       1.000000 -0.132418 -0.063012  0.243812  0.227018  0.087385   \n","sex      -0.132418  1.000000 -0.047097 -0.040415 -0.208102 -0.001355   \n","cp       -0.063012 -0.047097  1.000000  0.050702 -0.096644  0.074658   \n","trestbps  0.243812 -0.040415  0.050702  1.000000  0.148528  0.143264   \n","chol      0.227018 -0.208102 -0.096644  0.148528  1.000000  0.052546   \n","fbs       0.087385 -0.001355  0.074658  0.143264  0.052546  1.000000   \n","restecg  -0.095306 -0.054111  0.109053 -0.136626 -0.180644 -0.117263   \n","thalach  -0.383598 -0.013056  0.258213  0.039502 -0.013078  0.000900   \n","exang     0.060512  0.145445 -0.469963  0.105787  0.102933  0.125655   \n","oldpeak   0.221964 -0.002885 -0.175936  0.162876  0.104263 -0.002228   \n","slope    -0.160452  0.017102  0.166987 -0.119809 -0.050190 -0.146115   \n","ca        0.219522  0.104566 -0.140925  0.099326  0.058924  0.059986   \n","thal      0.100932  0.186333 -0.152755  0.060063  0.120370 -0.047798   \n","\n","           restecg   thalach     exang   oldpeak     slope        ca      thal  \n","age      -0.095306 -0.383598  0.060512  0.221964 -0.160452  0.219522  0.100932  \n","sex      -0.054111 -0.013056  0.145445 -0.002885  0.017102  0.104566  0.186333  \n","cp        0.109053  0.258213 -0.469963 -0.175936  0.166987 -0.140925 -0.152755  \n","trestbps -0.136626  0.039502  0.105787  0.162876 -0.119809  0.099326  0.060063  \n","chol     -0.180644 -0.013078  0.102933  0.104263 -0.050190  0.058924  0.120370  \n","fbs      -0.117263  0.000900  0.125655 -0.002228 -0.146115  0.059986 -0.047798  \n","restecg   1.000000  0.047802 -0.110255 -0.126950  0.153969 -0.128550  0.005214  \n","thalach   0.047802  1.000000 -0.370128 -0.281731  0.356648 -0.130283 -0.022201  \n","exang    -0.110255 -0.370128  1.000000  0.306686 -0.256865  0.115396  0.125061  \n","oldpeak  -0.126950 -0.281731  0.306686  1.000000 -0.553906  0.285621  0.230152  \n","slope     0.153969  0.356648 -0.256865 -0.553906  1.000000 -0.074957 -0.116003  \n","ca       -0.128550 -0.130283  0.115396  0.285621 -0.074957  1.000000  0.175307  \n","thal      0.005214 -0.022201  0.125061  0.230152 -0.116003  0.175307  1.000000  "],"text/html":["\n","  <div id=\"df-6cc820a9-6b6d-4a3f-a251-a78a0db154ac\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>sex</th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>fbs</th>\n","      <th>restecg</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>ca</th>\n","      <th>thal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>age</th>\n","      <td>1.000000</td>\n","      <td>-0.132418</td>\n","      <td>-0.063012</td>\n","      <td>0.243812</td>\n","      <td>0.227018</td>\n","      <td>0.087385</td>\n","      <td>-0.095306</td>\n","      <td>-0.383598</td>\n","      <td>0.060512</td>\n","      <td>0.221964</td>\n","      <td>-0.160452</td>\n","      <td>0.219522</td>\n","      <td>0.100932</td>\n","    </tr>\n","    <tr>\n","      <th>sex</th>\n","      <td>-0.132418</td>\n","      <td>1.000000</td>\n","      <td>-0.047097</td>\n","      <td>-0.040415</td>\n","      <td>-0.208102</td>\n","      <td>-0.001355</td>\n","      <td>-0.054111</td>\n","      <td>-0.013056</td>\n","      <td>0.145445</td>\n","      <td>-0.002885</td>\n","      <td>0.017102</td>\n","      <td>0.104566</td>\n","      <td>0.186333</td>\n","    </tr>\n","    <tr>\n","      <th>cp</th>\n","      <td>-0.063012</td>\n","      <td>-0.047097</td>\n","      <td>1.000000</td>\n","      <td>0.050702</td>\n","      <td>-0.096644</td>\n","      <td>0.074658</td>\n","      <td>0.109053</td>\n","      <td>0.258213</td>\n","      <td>-0.469963</td>\n","      <td>-0.175936</td>\n","      <td>0.166987</td>\n","      <td>-0.140925</td>\n","      <td>-0.152755</td>\n","    </tr>\n","    <tr>\n","      <th>trestbps</th>\n","      <td>0.243812</td>\n","      <td>-0.040415</td>\n","      <td>0.050702</td>\n","      <td>1.000000</td>\n","      <td>0.148528</td>\n","      <td>0.143264</td>\n","      <td>-0.136626</td>\n","      <td>0.039502</td>\n","      <td>0.105787</td>\n","      <td>0.162876</td>\n","      <td>-0.119809</td>\n","      <td>0.099326</td>\n","      <td>0.060063</td>\n","    </tr>\n","    <tr>\n","      <th>chol</th>\n","      <td>0.227018</td>\n","      <td>-0.208102</td>\n","      <td>-0.096644</td>\n","      <td>0.148528</td>\n","      <td>1.000000</td>\n","      <td>0.052546</td>\n","      <td>-0.180644</td>\n","      <td>-0.013078</td>\n","      <td>0.102933</td>\n","      <td>0.104263</td>\n","      <td>-0.050190</td>\n","      <td>0.058924</td>\n","      <td>0.120370</td>\n","    </tr>\n","    <tr>\n","      <th>fbs</th>\n","      <td>0.087385</td>\n","      <td>-0.001355</td>\n","      <td>0.074658</td>\n","      <td>0.143264</td>\n","      <td>0.052546</td>\n","      <td>1.000000</td>\n","      <td>-0.117263</td>\n","      <td>0.000900</td>\n","      <td>0.125655</td>\n","      <td>-0.002228</td>\n","      <td>-0.146115</td>\n","      <td>0.059986</td>\n","      <td>-0.047798</td>\n","    </tr>\n","    <tr>\n","      <th>restecg</th>\n","      <td>-0.095306</td>\n","      <td>-0.054111</td>\n","      <td>0.109053</td>\n","      <td>-0.136626</td>\n","      <td>-0.180644</td>\n","      <td>-0.117263</td>\n","      <td>1.000000</td>\n","      <td>0.047802</td>\n","      <td>-0.110255</td>\n","      <td>-0.126950</td>\n","      <td>0.153969</td>\n","      <td>-0.128550</td>\n","      <td>0.005214</td>\n","    </tr>\n","    <tr>\n","      <th>thalach</th>\n","      <td>-0.383598</td>\n","      <td>-0.013056</td>\n","      <td>0.258213</td>\n","      <td>0.039502</td>\n","      <td>-0.013078</td>\n","      <td>0.000900</td>\n","      <td>0.047802</td>\n","      <td>1.000000</td>\n","      <td>-0.370128</td>\n","      <td>-0.281731</td>\n","      <td>0.356648</td>\n","      <td>-0.130283</td>\n","      <td>-0.022201</td>\n","    </tr>\n","    <tr>\n","      <th>exang</th>\n","      <td>0.060512</td>\n","      <td>0.145445</td>\n","      <td>-0.469963</td>\n","      <td>0.105787</td>\n","      <td>0.102933</td>\n","      <td>0.125655</td>\n","      <td>-0.110255</td>\n","      <td>-0.370128</td>\n","      <td>1.000000</td>\n","      <td>0.306686</td>\n","      <td>-0.256865</td>\n","      <td>0.115396</td>\n","      <td>0.125061</td>\n","    </tr>\n","    <tr>\n","      <th>oldpeak</th>\n","      <td>0.221964</td>\n","      <td>-0.002885</td>\n","      <td>-0.175936</td>\n","      <td>0.162876</td>\n","      <td>0.104263</td>\n","      <td>-0.002228</td>\n","      <td>-0.126950</td>\n","      <td>-0.281731</td>\n","      <td>0.306686</td>\n","      <td>1.000000</td>\n","      <td>-0.553906</td>\n","      <td>0.285621</td>\n","      <td>0.230152</td>\n","    </tr>\n","    <tr>\n","      <th>slope</th>\n","      <td>-0.160452</td>\n","      <td>0.017102</td>\n","      <td>0.166987</td>\n","      <td>-0.119809</td>\n","      <td>-0.050190</td>\n","      <td>-0.146115</td>\n","      <td>0.153969</td>\n","      <td>0.356648</td>\n","      <td>-0.256865</td>\n","      <td>-0.553906</td>\n","      <td>1.000000</td>\n","      <td>-0.074957</td>\n","      <td>-0.116003</td>\n","    </tr>\n","    <tr>\n","      <th>ca</th>\n","      <td>0.219522</td>\n","      <td>0.104566</td>\n","      <td>-0.140925</td>\n","      <td>0.099326</td>\n","      <td>0.058924</td>\n","      <td>0.059986</td>\n","      <td>-0.128550</td>\n","      <td>-0.130283</td>\n","      <td>0.115396</td>\n","      <td>0.285621</td>\n","      <td>-0.074957</td>\n","      <td>1.000000</td>\n","      <td>0.175307</td>\n","    </tr>\n","    <tr>\n","      <th>thal</th>\n","      <td>0.100932</td>\n","      <td>0.186333</td>\n","      <td>-0.152755</td>\n","      <td>0.060063</td>\n","      <td>0.120370</td>\n","      <td>-0.047798</td>\n","      <td>0.005214</td>\n","      <td>-0.022201</td>\n","      <td>0.125061</td>\n","      <td>0.230152</td>\n","      <td>-0.116003</td>\n","      <td>0.175307</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6cc820a9-6b6d-4a3f-a251-a78a0db154ac')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6cc820a9-6b6d-4a3f-a251-a78a0db154ac button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6cc820a9-6b6d-4a3f-a251-a78a0db154ac');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e63e732d-f6ac-4351-80d5-77833fbb4ea0\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e63e732d-f6ac-4351-80d5-77833fbb4ea0')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e63e732d-f6ac-4351-80d5-77833fbb4ea0 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3288971022709155,\n        \"min\": -0.38359783465778,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.21952235891519456,\n          0.22196422700237833,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29789426752800235,\n        \"min\": -0.2081016235346405,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.10456579052791379,\n          -0.0028852755756875155,\n          -0.1324181840503398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34215868723327814,\n        \"min\": -0.4699626644248015,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.14092472349742258,\n          -0.17593649852166465,\n          -0.06301161743863527\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28203712928177893,\n        \"min\": -0.13662609249141316,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.09932571891373945,\n          0.16287634221503053,\n          0.24381188500289144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30006667932903835,\n        \"min\": -0.2081016235346405,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.05892360147925981,\n          0.10426333614484007,\n          0.2270175724327212\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28533138637529337,\n        \"min\": -0.14611549310092478,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.05998552342240462,\n          -0.002227965063114137,\n          0.08738507420608774\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30949505060001614,\n        \"min\": -0.18064362915007726,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.12855001178258932,\n          -0.12694970146982962,\n          -0.09530641366195051\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3606299186837209,\n        \"min\": -0.38359783465778,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.13028331324599046,\n          -0.28173140895595034,\n          -0.38359783465778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.36076238544570727,\n        \"min\": -0.4699626644248015,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.11539647319616261,\n          0.30668577321958795,\n          0.06051244371417506\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37009161888400155,\n        \"min\": -0.5539059461027078,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.28562064035933865,\n          1.0,\n          0.22196422700237833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3687041543311296,\n        \"min\": -0.5539059461027078,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          -0.07495728160156567,\n          -0.5539059461027078,\n          -0.1604518653799677\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29619527685591435,\n        \"min\": -0.14092472349742258,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          1.0,\n          0.28562064035933865,\n          0.21952235891519456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2870507711549217,\n        \"min\": -0.152755322817095,\n        \"max\": 1.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.1753073722120571,\n          0.23015246280746562,\n          0.10093230205070497\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["import seaborn as sns\n","plt.figure(figsize=(12,10))\n","cor=X_train.corr()\n","sns.heatmap(cor,annot=True,cmap=plt.cm.CMRmap_r)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":836},"id":"Cx-U9H3IN3hC","executionInfo":{"status":"ok","timestamp":1724769738779,"user_tz":-330,"elapsed":2536,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"3317dbb3-d6fa-4ddf-9760-373182c01044"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def correlation(dataset , threshold):\n","  col_corr = set()\n","  corr_matrix = dataset.corr()\n","  for i in range(len(corr_matrix.columns)):\n","    print(i)\n","    for j in range (i):\n","      print(\"J = \", j)\n","      print(corr_matrix.iloc[i,j])\n","      if abs (corr_matrix.iloc[i,j]) > threshold:\n","        colname=corr_matrix.columns[i]\n","        col_corr.add(colname)\n","  return col_corr\n","\n"],"metadata":{"id":"ppQ5Fq2nN3nb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["corr_features=correlation(X_train,0.7)\n","len(set(corr_features))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mWWaLd0NPd7E","executionInfo":{"status":"ok","timestamp":1724769738782,"user_tz":-330,"elapsed":251,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"9551912d-3aaf-4b68-f1ea-125331b3722c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","J =  0\n","-0.1324181840503398\n","2\n","J =  0\n","-0.06301161743863527\n","J =  1\n","-0.04709716984761531\n","3\n","J =  0\n","0.24381188500289144\n","J =  1\n","-0.04041452302075233\n","J =  2\n","0.05070188167159563\n","4\n","J =  0\n","0.2270175724327212\n","J =  1\n","-0.2081016235346405\n","J =  2\n","-0.09664416133583269\n","J =  3\n","0.14852838497089746\n","5\n","J =  0\n","0.08738507420608774\n","J =  1\n","-0.0013549900935101026\n","J =  2\n","0.07465781760350391\n","J =  3\n","0.14326432922198326\n","J =  4\n","0.05254620162765807\n","6\n","J =  0\n","-0.09530641366195051\n","J =  1\n","-0.054111357252364684\n","J =  2\n","0.10905288855592282\n","J =  3\n","-0.13662609249141316\n","J =  4\n","-0.18064362915007726\n","J =  5\n","-0.1172626445969849\n","7\n","J =  0\n","-0.38359783465778\n","J =  1\n","-0.013056240149483297\n","J =  2\n","0.25821284465782474\n","J =  3\n","0.03950170436778935\n","J =  4\n","-0.013078246675593999\n","J =  5\n","0.0008998560645371048\n","J =  6\n","0.04780210745883982\n","8\n","J =  0\n","0.06051244371417506\n","J =  1\n","0.14544499965316007\n","J =  2\n","-0.4699626644248015\n","J =  3\n","0.10578691231529798\n","J =  4\n","0.10293326003542565\n","J =  5\n","0.12565541648907091\n","J =  6\n","-0.11025468509780349\n","J =  7\n","-0.3701277026358474\n","9\n","J =  0\n","0.22196422700237833\n","J =  1\n","-0.0028852755756875155\n","J =  2\n","-0.17593649852166465\n","J =  3\n","0.16287634221503053\n","J =  4\n","0.10426333614484007\n","J =  5\n","-0.002227965063114137\n","J =  6\n","-0.12694970146982962\n","J =  7\n","-0.28173140895595034\n","J =  8\n","0.30668577321958795\n","10\n","J =  0\n","-0.1604518653799677\n","J =  1\n","0.017101849404665873\n","J =  2\n","0.1669867763937839\n","J =  3\n","-0.11980862016198227\n","J =  4\n","-0.050190140744964425\n","J =  5\n","-0.14611549310092478\n","J =  6\n","0.1539690599160555\n","J =  7\n","0.35664777994481156\n","J =  8\n","-0.25686487570965194\n","J =  9\n","-0.5539059461027078\n","11\n","J =  0\n","0.21952235891519456\n","J =  1\n","0.10456579052791379\n","J =  2\n","-0.14092472349742258\n","J =  3\n","0.09932571891373945\n","J =  4\n","0.05892360147925981\n","J =  5\n","0.05998552342240462\n","J =  6\n","-0.12855001178258932\n","J =  7\n","-0.13028331324599046\n","J =  8\n","0.11539647319616261\n","J =  9\n","0.28562064035933865\n","J =  10\n","-0.07495728160156567\n","12\n","J =  0\n","0.10093230205070497\n","J =  1\n","0.1863332817351696\n","J =  2\n","-0.152755322817095\n","J =  3\n","0.06006264349098877\n","J =  4\n","0.12036984622562091\n","J =  5\n","-0.04779837228496199\n","J =  6\n","0.005214348986067431\n","J =  7\n","-0.02220132260159558\n","J =  8\n","0.1250611860294034\n","J =  9\n","0.23015246280746562\n","J =  10\n","-0.1160031145222576\n","J =  11\n","0.1753073722120571\n"]},{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["corr_features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MkzN8ZelPg7S","executionInfo":{"status":"ok","timestamp":1724769738782,"user_tz":-330,"elapsed":246,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"a16224f3-ae1f-444f-d0b4-a796efb0e72f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["set()"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","source":["from sklearn.feature_selection import chi2\n","chi_scores=chi2(X_train,y_train)\n","chi_scores = chi2(X, y)"],"metadata":{"id":"YddANoHXPq7o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#VISUALIZATION OF CHI-SQUARE SCORE\n","# higher the chi value, higher the importance\n","chi_values = pd.Series(chi_scores[0], index=X.columns)\n","chi_values.sort_values(ascending=False, inplace=True)\n","chi_values.plot.bar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":490},"id":"uSMUat33PvBp","executionInfo":{"status":"ok","timestamp":1724769738783,"user_tz":-330,"elapsed":135,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"9f84ec89-1ece-4885-f24c-033c8ee0f579"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":61},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_7dbpQNsQEIM","executionInfo":{"status":"ok","timestamp":1724769738783,"user_tz":-330,"elapsed":128,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"bfed73c6-37a0-42af-af59-7921972c7e16"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n","       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target'],\n","      dtype='object')"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["# import pandas as pd\n","# from sklearn.model_selection import train_test_split\n","# from sklearn.preprocessing import StandardScaler\n","# from sklearn.linear_model import LogisticRegression\n","# from sklearn.neighbors import KNeighborsClassifier\n","# from sklearn.tree import DecisionTreeClassifier\n","# from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","# from sklearn.svm import SVC\n","# from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","# import joblib\n","\n","# # # Step 2: Load the data\n","# # df = pd.read_csv('your_file.csv')\n","\n","# # Step 4: Filter and prepare the data\n","# selected_columns = ['cp', 'trestbps', 'chol', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\n","# df = df[selected_columns]\n","\n","# X = df.drop('target', axis=1)\n","# y = df['target']\n","\n","# # Step 5: Split the data\n","# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# # Step 6: Standardize the features\n","# scaler = StandardScaler()\n","# X_train = scaler.fit_transform(X_train)\n","# X_test = scaler.transform(X_test)\n","\n","# # Step 7: Initialize the models\n","# models = {\n","#     'Logistic Regression': LogisticRegression(),\n","#     'K-Nearest Neighbors': KNeighborsClassifier(),\n","#     'Decision Tree': DecisionTreeClassifier(),\n","#     'Random Forest': RandomForestClassifier(),\n","#     'Support Vector Machine': SVC(),\n","#     'Gradient Boosting': GradientBoostingClassifier()\n","# }\n","\n","# # Step 8: Train and evaluate each model\n","# results = {}\n","\n","# for name, model in models.items():\n","#     print(f'Training {name}...')\n","#     model.fit(X_train, y_train)\n","#     y_pred = model.predict(X_test)\n","\n","#     accuracy = accuracy_score(y_test, y_pred)\n","#     results[name] = accuracy\n","\n","#     print(f'{name} Accuracy: {accuracy:.2f}')\n","#     print('Confusion Matrix:')\n","#     print(confusion_matrix(y_test, y_pred))\n","#     print('Classification Report:')\n","#     print(classification_report(y_test, y_pred))\n","#     print('-' * 50)\n","\n","# # Step 9: Compare the models\n","# print('Model Comparison:')\n","# for name, accuracy in results.items():\n","#     print(f'{name}: {accuracy:.2f}')\n","\n","# # Step 10: Save the best model (Optional)\n","# # Uncomment the lines below if you want to save the model with the highest accuracy\n","# # best_model_name = max(results, key=results.get)\n","# # best_model = models[best_model_name]\n","# # joblib.dump(best_model, f'best_model_{best_model_name}.pkl')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YkcszWiMRXui","executionInfo":{"status":"ok","timestamp":1724821321824,"user_tz":-330,"elapsed":722,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"60208f72-7892-4035-bf8e-e471f8cf5ee5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Logistic Regression...\n","Logistic Regression Accuracy: 0.79\n","Confusion Matrix:\n","[[71 31]\n"," [12 91]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.86      0.70      0.77       102\n","           1       0.75      0.88      0.81       103\n","\n","    accuracy                           0.79       205\n","   macro avg       0.80      0.79      0.79       205\n","weighted avg       0.80      0.79      0.79       205\n","\n","--------------------------------------------------\n","Training K-Nearest Neighbors...\n","K-Nearest Neighbors Accuracy: 0.83\n","Confusion Matrix:\n","[[78 24]\n"," [10 93]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.76      0.82       102\n","           1       0.79      0.90      0.85       103\n","\n","    accuracy                           0.83       205\n","   macro avg       0.84      0.83      0.83       205\n","weighted avg       0.84      0.83      0.83       205\n","\n","--------------------------------------------------\n","Training Decision Tree...\n","Decision Tree Accuracy: 0.99\n","Confusion Matrix:\n","[[102   0]\n"," [  3 100]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.99       102\n","           1       1.00      0.97      0.99       103\n","\n","    accuracy                           0.99       205\n","   macro avg       0.99      0.99      0.99       205\n","weighted avg       0.99      0.99      0.99       205\n","\n","--------------------------------------------------\n","Training Random Forest...\n","Random Forest Accuracy: 0.99\n","Confusion Matrix:\n","[[102   0]\n"," [  3 100]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.99       102\n","           1       1.00      0.97      0.99       103\n","\n","    accuracy                           0.99       205\n","   macro avg       0.99      0.99      0.99       205\n","weighted avg       0.99      0.99      0.99       205\n","\n","--------------------------------------------------\n","Training Support Vector Machine...\n","Support Vector Machine Accuracy: 0.84\n","Confusion Matrix:\n","[[80 22]\n"," [11 92]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.88      0.78      0.83       102\n","           1       0.81      0.89      0.85       103\n","\n","    accuracy                           0.84       205\n","   macro avg       0.84      0.84      0.84       205\n","weighted avg       0.84      0.84      0.84       205\n","\n","--------------------------------------------------\n","Training Gradient Boosting...\n","Gradient Boosting Accuracy: 0.90\n","Confusion Matrix:\n","[[89 13]\n"," [ 7 96]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.87      0.90       102\n","           1       0.88      0.93      0.91       103\n","\n","    accuracy                           0.90       205\n","   macro avg       0.90      0.90      0.90       205\n","weighted avg       0.90      0.90      0.90       205\n","\n","--------------------------------------------------\n","Model Comparison:\n","Logistic Regression: 0.79\n","K-Nearest Neighbors: 0.83\n","Decision Tree: 0.99\n","Random Forest: 0.99\n","Support Vector Machine: 0.84\n","Gradient Boosting: 0.90\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import joblib\n","\n","# Step 2: Load the data\n","# df = pd.read_csv('your_file.csv')\n","\n","# Step 4: Filter and prepare the data\n","selected_columns = ['cp', 'trestbps', 'chol', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\n","df = df[selected_columns]\n","\n","X = df.drop('target', axis=1)\n","y = df['target']\n","\n","# Step 5: Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Step 6: Standardize the features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# **Step 3 (Saving the Scaler): Save the scaler**\n","joblib.dump(scaler, 'scaler.pkl')\n","\n","# Step 7: Initialize the models\n","models = {\n","    'Logistic Regression': LogisticRegression(),\n","    'K-Nearest Neighbors': KNeighborsClassifier(),\n","    'Decision Tree': DecisionTreeClassifier(),\n","    'Random Forest': RandomForestClassifier(),\n","    'Support Vector Machine': SVC(),\n","    'Gradient Boosting': GradientBoostingClassifier()\n","}\n","\n","# Step 8: Train and evaluate each model\n","results = {}\n","\n","for name, model in models.items():\n","    print(f'Training {name}...')\n","    model.fit(X_train, y_train)\n","    y_pred = model.predict(X_test)\n","\n","    accuracy = accuracy_score(y_test, y_pred)\n","    results[name] = accuracy\n","\n","    print(f'{name} Accuracy: {accuracy:.2f}')\n","    print('Confusion Matrix:')\n","    print(confusion_matrix(y_test, y_pred))\n","    print('Classification Report:')\n","    print(classification_report(y_test, y_pred))\n","    print('-' * 50)\n","\n","# Step 9: Compare the models\n","print('Model Comparison:')\n","for name, accuracy in results.items():\n","    print(f'{name}: {accuracy:.2f}')\n","\n","# Step 10: Save the models\n","for name, model in models.items():\n","    joblib.dump(model, f'{name}.pkl')\n"],"metadata":{"id":"f2cWPBX1aRU4","executionInfo":{"status":"ok","timestamp":1724822139801,"user_tz":-330,"elapsed":3335,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"547ea40c-cc04-4048-bace-6a3f1c204ec7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Logistic Regression...\n","Logistic Regression Accuracy: 0.79\n","Confusion Matrix:\n","[[71 31]\n"," [12 91]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.86      0.70      0.77       102\n","           1       0.75      0.88      0.81       103\n","\n","    accuracy                           0.79       205\n","   macro avg       0.80      0.79      0.79       205\n","weighted avg       0.80      0.79      0.79       205\n","\n","--------------------------------------------------\n","Training K-Nearest Neighbors...\n","K-Nearest Neighbors Accuracy: 0.83\n","Confusion Matrix:\n","[[78 24]\n"," [10 93]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.76      0.82       102\n","           1       0.79      0.90      0.85       103\n","\n","    accuracy                           0.83       205\n","   macro avg       0.84      0.83      0.83       205\n","weighted avg       0.84      0.83      0.83       205\n","\n","--------------------------------------------------\n","Training Decision Tree...\n","Decision Tree Accuracy: 0.99\n","Confusion Matrix:\n","[[102   0]\n"," [  3 100]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.99       102\n","           1       1.00      0.97      0.99       103\n","\n","    accuracy                           0.99       205\n","   macro avg       0.99      0.99      0.99       205\n","weighted avg       0.99      0.99      0.99       205\n","\n","--------------------------------------------------\n","Training Random Forest...\n","Random Forest Accuracy: 0.99\n","Confusion Matrix:\n","[[102   0]\n"," [  3 100]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.97      1.00      0.99       102\n","           1       1.00      0.97      0.99       103\n","\n","    accuracy                           0.99       205\n","   macro avg       0.99      0.99      0.99       205\n","weighted avg       0.99      0.99      0.99       205\n","\n","--------------------------------------------------\n","Training Support Vector Machine...\n","Support Vector Machine Accuracy: 0.84\n","Confusion Matrix:\n","[[80 22]\n"," [11 92]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.88      0.78      0.83       102\n","           1       0.81      0.89      0.85       103\n","\n","    accuracy                           0.84       205\n","   macro avg       0.84      0.84      0.84       205\n","weighted avg       0.84      0.84      0.84       205\n","\n","--------------------------------------------------\n","Training Gradient Boosting...\n","Gradient Boosting Accuracy: 0.90\n","Confusion Matrix:\n","[[89 13]\n"," [ 7 96]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.87      0.90       102\n","           1       0.88      0.93      0.91       103\n","\n","    accuracy                           0.90       205\n","   macro avg       0.90      0.90      0.90       205\n","weighted avg       0.90      0.90      0.90       205\n","\n","--------------------------------------------------\n","Model Comparison:\n","Logistic Regression: 0.79\n","K-Nearest Neighbors: 0.83\n","Decision Tree: 0.99\n","Random Forest: 0.99\n","Support Vector Machine: 0.84\n","Gradient Boosting: 0.90\n"]}]},{"cell_type":"code","source":["import joblib\n","\n","# Save the models\n","for name, model in models.items():\n","    joblib.dump(model, f'{name}.pkl')\n"],"metadata":{"id":"4N_pzcJRXMTD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","# Filter and prepare the data\n","selected_columns = ['cp', 'trestbps', 'chol', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']\n","df = df[selected_columns]\n","X = df.drop('target', axis=1)\n","y = df['target']\n","\n","# Split the data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Standardize the features\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)\n","\n","# Train the K-Nearest Neighbors model\n","model = KNeighborsClassifier()\n","model.fit(X_train, y_train)\n","\n","# Make predictions\n","y_pred = model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f'K-Nearest Neighbors Accuracy: {accuracy:.2f}')\n","print('Confusion Matrix:')\n","print(confusion_matrix(y_test, y_pred))\n","print('Classification Report:')\n","print(classification_report(y_test, y_pred))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PVs9ZCyCSXJo","executionInfo":{"status":"ok","timestamp":1724769750851,"user_tz":-330,"elapsed":506,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"fcf7beae-1a43-4d67-f708-f89f1e609584"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["K-Nearest Neighbors Accuracy: 0.83\n","Confusion Matrix:\n","[[78 24]\n"," [10 93]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.89      0.76      0.82       102\n","           1       0.79      0.90      0.85       103\n","\n","    accuracy                           0.83       205\n","   macro avg       0.84      0.83      0.83       205\n","weighted avg       0.84      0.83      0.83       205\n","\n"]}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"sJUkUELdSlBH","executionInfo":{"status":"ok","timestamp":1724769791334,"user_tz":-330,"elapsed":629,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"c143a97b-00fa-4825-8244-021abd3b1e0c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      cp  trestbps  chol  thalach  exang  oldpeak  slope  ca  thal\n","0      0       125   212      168      0      1.0      2   2     3\n","1      0       140   203      155      1      3.1      0   0     3\n","2      0       145   174      125      1      2.6      0   0     3\n","3      0       148   203      161      0      0.0      2   1     3\n","4      0       138   294      106      0      1.9      1   3     2\n","...   ..       ...   ...      ...    ...      ...    ...  ..   ...\n","1020   1       140   221      164      1      0.0      2   0     2\n","1021   0       125   258      141      1      2.8      1   1     3\n","1022   0       110   275      118      1      1.0      1   1     2\n","1023   0       110   254      159      0      0.0      2   0     2\n","1024   0       120   188      113      0      1.4      1   1     3\n","\n","[1025 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-6c9aed49-dd00-4737-b32c-548455c8f7c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cp</th>\n","      <th>trestbps</th>\n","      <th>chol</th>\n","      <th>thalach</th>\n","      <th>exang</th>\n","      <th>oldpeak</th>\n","      <th>slope</th>\n","      <th>ca</th>\n","      <th>thal</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>125</td>\n","      <td>212</td>\n","      <td>168</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>140</td>\n","      <td>203</td>\n","      <td>155</td>\n","      <td>1</td>\n","      <td>3.1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>145</td>\n","      <td>174</td>\n","      <td>125</td>\n","      <td>1</td>\n","      <td>2.6</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>148</td>\n","      <td>203</td>\n","      <td>161</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>138</td>\n","      <td>294</td>\n","      <td>106</td>\n","      <td>0</td>\n","      <td>1.9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1020</th>\n","      <td>1</td>\n","      <td>140</td>\n","      <td>221</td>\n","      <td>164</td>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1021</th>\n","      <td>0</td>\n","      <td>125</td>\n","      <td>258</td>\n","      <td>141</td>\n","      <td>1</td>\n","      <td>2.8</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1022</th>\n","      <td>0</td>\n","      <td>110</td>\n","      <td>275</td>\n","      <td>118</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1023</th>\n","      <td>0</td>\n","      <td>110</td>\n","      <td>254</td>\n","      <td>159</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1024</th>\n","      <td>0</td>\n","      <td>120</td>\n","      <td>188</td>\n","      <td>113</td>\n","      <td>0</td>\n","      <td>1.4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1025 rows Ã— 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c9aed49-dd00-4737-b32c-548455c8f7c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c9aed49-dd00-4737-b32c-548455c8f7c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c9aed49-dd00-4737-b32c-548455c8f7c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ab864f55-560c-4a66-a62d-743b4b9b8b21\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab864f55-560c-4a66-a62d-743b4b9b8b21')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ab864f55-560c-4a66-a62d-743b4b9b8b21 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5e501b58-9038-462c-91a6-6b4c5dc8abb2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5e501b58-9038-462c-91a6-6b4c5dc8abb2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 1025,\n  \"fields\": [\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          128,\n          172,\n          156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          267,\n          262,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          180,\n          152,\n          118\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.175053255150176,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.8,\n          0.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["y_pred1=model.predict([[0,125,212,168,0,1.0,2,2,3]])\n","y_pred1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6NyHFHXQSfVP","executionInfo":{"status":"ok","timestamp":1724769845235,"user_tz":-330,"elapsed":453,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"09b07df3-66e6-4cb9-ad30-46fb095d617f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0])"]},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["y_pred2=model.predict([[1,140,221,14,1,0.0,1,0,2]])\n","y_pred2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z28_5wunTIln","executionInfo":{"status":"ok","timestamp":1724770131983,"user_tz":-330,"elapsed":449,"user":{"displayName":"JITESH SHELKE","userId":"00568965558409587449"}},"outputId":"3afb8e4a-9883-4fec-8916-afaa4324b9fe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":74}]}]}